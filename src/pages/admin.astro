---
import Layout from '../layouts/Layout.astro';
import { getAllPosts } from '../lib/posts';
import { getImageUrl } from '../lib/storage';

const seoConfig = {
  title: "Panel de Administración - Ajedrez FAMAF",
  description: "Panel de administración para gestionar torneos y posts",
};

// Función para convertir fecha YYYY-MM-DD a formato español
function formatDateToSpanish(dateString: string): string {
  const date = new Date(dateString);
  const months = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];
  
  const day = date.getDate();
  const month = months[date.getMonth()];
  
  return `${day} de ${month}`;
}

const posts = await getAllPosts();
---

<Layout title={seoConfig.title} description={seoConfig.description}>
  <div class="min-h-screen bg-gray-50 flex flex-col">
    <!-- Header -->
    <header class="bg-gray-900 border-b border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <a href="/" class="flex items-center space-x-3">
            <img
              src="/ajedrezfamaf.jpg"
              alt="Ajedrez FAMAF"
              class="w-10 h-10 rounded-full"
            />
            <h1 class="text-xl font-bold text-white">Ajedrez FAMAF - Admin</h1>
          </a>
          <a
            href="/torneos"
            class="text-gray-400 hover:text-white transition-colors"
          >
            Torneos
          </a>
        </div>
      </div>
    </header>

    <main class="flex-1">
      <!-- Login Section -->
      <section id="admin-login" class="py-16">
        <div class="max-w-md mx-auto px-4 sm:px-6 lg:px-8">
          <div class="bg-white shadow-lg rounded-lg p-8">
            <div class="text-center mb-8">
              <h2 class="text-2xl font-bold text-gray-900 mb-2">
                Acceso de Administrador
              </h2>
              <p class="text-gray-600">
                Ingresa tu contraseña para acceder
              </p>
            </div>

            <form id="admin-login-form" class="space-y-6" method="post" action="#" onsubmit="return false;">
              <div>
                <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
                  Contraseña
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Ingresa tu contraseña"
                />
              </div>

              <button
                type="submit"
                class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
              >
                Ingresar
              </button>
            </form>

            <div id="error-message" class="mt-4 text-red-600 text-sm hidden">
              Contraseña incorrecta. Intenta nuevamente.
            </div>
          </div>
        </div>
      </section>

      <!-- Admin Panel (Hidden by default) -->
      <section id="admin-panel" class="hidden">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          
          <!-- Navigation Tabs -->
          <div class="mb-8">
            <nav class="flex space-x-8">
              <button
                id="tab-torneos"
                class="tab-button active py-2 px-1 border-b-2 border-blue-500 font-medium text-sm text-blue-600"
              >
                Torneos
              </button>
              <button
                id="tab-posts"
                class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700"
              >
                Posts
              </button>
              <button
                id="tab-historial"
                class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700"
              >
                Historial de Cambios
              </button>
            </nav>
          </div>

          <!-- Torneos Tab -->
          <div id="content-torneos" class="tab-content">
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-2xl font-bold text-gray-900">
                Gestión de Torneos
              </h3>
              <button
                id="create-tournament-btn"
                class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
              >
                Crear Torneo
              </button>
            </div>

            <!-- Tournament List -->
            <div class="bg-white shadow overflow-hidden sm:rounded-md">
              <div class="px-4 py-5 sm:p-6">
                <div class="space-y-4" id="tournaments-list">
                  <div class="text-center py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p class="text-gray-500">Cargando torneos...</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Posts Tab -->
          <div id="content-posts" class="tab-content hidden">
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-2xl font-bold text-gray-900">
                Gestión de Posts
              </h3>
              <button
                id="create-post-btn"
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg shadow-md"
              >
                Crear Post
              </button>
            </div>

            <!-- Posts List -->
            <div class="bg-white shadow overflow-hidden sm:rounded-md">
              <div class="px-4 py-5 sm:p-6">
                <div class="space-y-4" id="admin-posts-list">
                  {posts.map((post) => (
                    <div class="border border-gray-200 rounded-lg p-4 flex items-start space-x-4" data-post-id={post.id}>
                      <div class="flex-1">
                        <h4 class="text-lg font-semibold text-gray-900 mb-2">
                          <a 
                            href={`/${post.slug}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-600 hover:text-blue-800 hover:underline"
                          >
                            {post.title}
                          </a>
                        </h4>
                        <p class="text-gray-600 text-sm mb-2">
                          Fecha: {formatDateToSpanish(post.date)}
                        </p>
                        <p class="text-gray-600 text-sm mb-2">
                          Slug: {post.slug}
                        </p>
                        <p class="text-gray-500 text-sm">
                          {post.content.substring(0, 100)}...
                        </p>
                      </div>
                      <div class="flex space-x-2">
                        <button 
                          class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm edit-post-btn"
                          data-post-id={post.id}
                        >
                          Editar
                        </button>
                        <button 
                          class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm delete-post-btn"
                          data-post-id={post.id}
                          data-post-title={post.title}
                        >
                          Eliminar
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <!-- Historial Tab -->
          <div id="content-historial" class="tab-content hidden">
            <div class="mb-6">
              <h3 class="text-2xl font-bold text-gray-900">
                Historial de Cambios
              </h3>
            </div>

            <!-- History List -->
            <div class="bg-white shadow overflow-hidden sm:rounded-md">
              <div class="px-4 py-5 sm:p-6">
                <div class="space-y-4">
                  <!-- Mock History Entry 1 - Post -->
                  <div class="border-l-4 border-blue-500 pl-4">
                    <div class="flex justify-between items-start">
                      <div>
                        <h4 class="text-lg font-semibold text-gray-900">
                          Post "Torneo de Septiembre 2022" editado
                        </h4>
                        <p class="text-gray-600 text-sm">
                          Admin: admin • Fecha: 23 de septiembre, 2022 - 14:30
                        </p>
                        <p class="text-gray-500 text-sm mt-1">
                          Se actualizó la información de participantes y resultados
                        </p>
                      </div>
                      <button class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm">
                        Ver Cambios
                      </button>
                    </div>
                  </div>

                  <!-- Mock History Entry 2 - Torneo -->
                  <div class="border-l-4 border-green-500 pl-4">
                    <div class="flex justify-between items-start">
                      <div>
                        <h4 class="text-lg font-semibold text-gray-900">
                          Torneo "Campeonato de Primavera" creado
                        </h4>
                        <p class="text-gray-600 text-sm">
                          Admin: admin • Fecha: 22 de septiembre, 2022 - 16:45
                        </p>
                        <p class="text-gray-500 text-sm mt-1">
                          Nuevo torneo creado con 32 jugadores máximo
                        </p>
                      </div>
                      <button class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm">
                        Ver Torneo
                      </button>
                    </div>
                  </div>

                  <!-- Mock History Entry 3 - Post -->
                  <div class="border-l-4 border-yellow-500 pl-4">
                    <div class="flex justify-between items-start">
                      <div>
                        <h4 class="text-lg font-semibold text-gray-900">
                          Post "Vuelven las clases del taller" actualizado
                        </h4>
                        <p class="text-gray-600 text-sm">
                          Admin: admin • Fecha: 20 de septiembre, 2022 - 10:15
                        </p>
                        <p class="text-gray-500 text-sm mt-1">
                          Se agregó información sobre horarios y ubicación
                        </p>
                      </div>
                      <button class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm">
                        Ver Cambios
                      </button>
                    </div>
                  </div>

                  <!-- Mock History Entry 4 - Torneo -->
                  <div class="border-l-4 border-red-500 pl-4">
                    <div class="flex justify-between items-start">
                      <div>
                        <h4 class="text-lg font-semibold text-gray-900">
                          Torneo "Torneo de Agosto" eliminado
                        </h4>
                        <p class="text-gray-600 text-sm">
                          Admin: admin • Fecha: 19 de septiembre, 2022 - 09:30
                        </p>
                        <p class="text-gray-500 text-sm mt-1">
                          Torneo cancelado por falta de participantes
                        </p>
                      </div>
                      <button class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm">
                        Ver Detalles
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-900 border-t border-gray-700 py-8 mt-auto">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center">
          <a
            class="inline-flex items-center text-gray-300 hover:text-white transition-all text-lg"
            href="https://gonza.gr"
            target="_blank"
            rel="noopener noreferrer"
          >
            💻 🧉 Desarrollado por Gonza
          </a>
          <span class="text-gray-300 text-lg">
            Córdoba, Argentina 🇦🇷
          </span>
        </div>
      </div>
    </footer>

    <!-- Tournament Modal -->
    <div id="tournament-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
          <div class="flex items-center justify-between p-6 border-b border-gray-200">
            <h3 class="text-xl font-semibold text-gray-900" id="tournament-modal-title">
              Crear Nuevo Torneo
            </h3>
            <button id="close-tournament-modal" class="text-gray-400 hover:text-gray-600">
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div class="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <form id="tournament-form" class="space-y-6">
              <input type="hidden" id="tournament-id" name="id" />
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="tournament-name" class="block text-sm font-medium text-gray-700 mb-2">
                    Nombre del Torneo
                  </label>
                  <input
                    type="text"
                    id="tournament-name"
                    name="name"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Ej: Torneo de Primavera 2024"
                  />
                </div>
                
                <div>
                  <label for="tournament-system" class="block text-sm font-medium text-gray-700 mb-2">
                    Sistema
                  </label>
                  <select
                    id="tournament-system"
                    name="system"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Seleccionar sistema</option>
                    <option value="suizo">Suizo</option>
                    <option value="round_robin">Round Robin</option>
                    <option value="eliminacion">Eliminación</option>
                  </select>
                </div>
              </div>

              <div>
                <label for="tournament-description" class="block text-sm font-medium text-gray-700 mb-2">
                  Descripción
                </label>
                <textarea
                  id="tournament-description"
                  name="description"
                  rows="3"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Descripción del torneo..."
                ></textarea>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label for="tournament-max-players" class="block text-sm font-medium text-gray-700 mb-2">
                    Máx. Jugadores
                  </label>
                  <input
                    type="number"
                    id="tournament-max-players"
                    name="max_players"
                    required
                    min="2"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="32"
                  />
                </div>
                
                <div>
                  <label for="tournament-time" class="block text-sm font-medium text-gray-700 mb-2">
                    Tiempo por Jugador (min)
                  </label>
                  <input
                    type="number"
                    id="tournament-time"
                    name="time_per_player"
                    required
                    min="5"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="60"
                  />
                </div>
                
                <div>
                  <label for="tournament-cost" class="block text-sm font-medium text-gray-700 mb-2">
                    Costo ($)
                  </label>
                  <input
                    type="number"
                    id="tournament-cost"
                    name="cost"
                    required
                    min="0"
                    step="0.01"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="5000"
                  />
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="tournament-date" class="block text-sm font-medium text-gray-700 mb-2">
                    Fecha
                  </label>
                  <input
                    type="date"
                    id="tournament-date"
                    name="start_date"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label for="tournament-time-start" class="block text-sm font-medium text-gray-700 mb-2">
                    Hora de Inicio
                  </label>
                  <input
                    type="time"
                    id="tournament-time-start"
                    name="start_time"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>

              <div>
                <label for="tournament-location" class="block text-sm font-medium text-gray-700 mb-2">
                  Ubicación
                </label>
                <input
                  type="text"
                  id="tournament-location"
                  name="location"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Ej: FAMAF - Aula Magna"
                />
              </div>

              <div>
                <label for="tournament-prizes" class="block text-sm font-medium text-gray-700 mb-2">
                  Premios (opcional)
                </label>
                <textarea
                  id="tournament-prizes"
                  name="prizes"
                  rows="2"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Descripción de los premios..."
                ></textarea>
              </div>
            </form>
          </div>
          
          <div class="flex items-center justify-end space-x-3 p-6 border-t border-gray-200">
            <button
              id="cancel-tournament-btn"
              type="button"
              class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300"
            >
              Cancelar
            </button>
            <button
              id="save-tournament-btn"
              type="submit"
              form="tournament-form"
              class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Guardar Torneo
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Post Editor Modal -->
    <div id="post-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
          <div class="flex items-center justify-between p-6 border-b border-gray-200">
            <h3 class="text-xl font-semibold text-gray-900" id="post-modal-title">
              Crear Post
            </h3>
            <button id="close-post-modal" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div class="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <form id="post-form" class="space-y-6">
              <input type="hidden" id="post-id" name="postId" />
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="post-title" class="block text-sm font-medium text-gray-700 mb-2">
                    Título del Post
                  </label>
                  <input
                    type="text"
                    id="post-title"
                    name="title"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Ingresa el título del post"
                  />
                </div>
                
                <div>
                  <label for="post-slug" class="block text-sm font-medium text-gray-700 mb-2">
                    Slug (URL)
                  </label>
                  <input
                    type="text"
                    id="post-slug"
                    name="slug"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="torneo-septiembre-2022"
                  />
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="post-date" class="block text-sm font-medium text-gray-700 mb-2">
                    Fecha
                  </label>
                  <input
                    type="date"
                    id="post-date"
                    name="date"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label for="post-version" class="block text-sm font-medium text-gray-700 mb-2">
                    Versión
                  </label>
                  <input
                    type="text"
                    id="post-version"
                    name="version"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="v1.0"
                  />
                </div>
              </div>

              <div>
                <label for="post-content" class="block text-sm font-medium text-gray-700 mb-2">
                  Contenido (Markdown)
                </label>
                <textarea
                  id="post-content"
                  name="content"
                  rows="15"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
                  placeholder="Escribe el contenido del post en Markdown..."
                ></textarea>
                <p class="text-sm text-gray-500 mt-2">
                  Puedes usar Markdown para formatear el contenido. Las imágenes se subirán automáticamente a Supabase Storage.
                </p>
              </div>

              <div>
                <label for="post-image" class="block text-sm font-medium text-gray-700 mb-2">
                  <span id="featured-image-label">Imagen de Portada</span>
                  <span id="featured-image-optional" class="text-gray-500">(requerida)</span>
                </label>
                <input
                  type="file"
                  id="post-image"
                  name="image"
                  accept="image/*"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <div id="featured-image-preview" class="mt-2 hidden">
                  <p class="text-xs text-gray-500 mb-1">Imagen actual:</p>
                  <img id="preview-img" class="w-32 h-20 object-cover rounded border" alt="Preview" />
                </div>
                <div id="featured-image-upload-preview" class="mt-2 hidden">
                  <p class="text-xs text-gray-500 mb-1">Nueva imagen seleccionada:</p>
                  <img id="upload-preview-img" class="w-32 h-20 object-cover rounded border" alt="Upload Preview" />
                </div>
                <p class="text-sm text-gray-500 mt-2">
                  <span id="featured-image-help">Selecciona una imagen para la portada del post</span>
                </p>
              </div>
            </form>
          </div>
          
          <div class="flex items-center justify-end space-x-3 p-6 border-t border-gray-200">
            <button
              type="button"
              id="cancel-post-modal"
              class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
            >
              Cancelar
            </button>
            <button
              type="button"
              id="save-post"
              class="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
            >
              Guardar Post
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ 
  ADMIN_PASSWORD: process.env.CHESS_ADMIN_PASSWORD || 'admin123',
  EDITOR_PASSWORD: process.env.CHESS_EDITOR_PASSWORD || 'editor123',
  COLEGA_PASSWORD: process.env.CHESS_COLEGA_PASSWORD || 'colega123'
}}>
  // Las contraseñas ahora vienen de las variables de entorno
  
  // Función simple de login
  function handleLogin() {
    const password = document.getElementById('password').value;
    const errorMessage = document.getElementById('error-message');
    const adminPanel = document.getElementById('admin-panel');
    const loginSection = document.getElementById('admin-login');
    
    if (password === ADMIN_PASSWORD) {
      adminPanel.classList.remove('hidden');
      loginSection.classList.add('hidden');
      
      // Inicializar funcionalidad de admin
      initializeAdminPanel();
    } else if (password === EDITOR_PASSWORD) {
      window.location.href = '/editor';
    } else if (password === COLEGA_PASSWORD) {
      window.location.href = '/colega';
    } else {
      errorMessage.classList.remove('hidden');
      setTimeout(() => {
        errorMessage.classList.add('hidden');
      }, 3000);
    }
  }
  
  // Función para inicializar el panel de admin
  function initializeAdminPanel() {
    
    // Tab functionality
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all buttons
        tabButtons.forEach(btn => {
          btn.classList.remove('active', 'border-blue-500', 'text-blue-600');
          btn.classList.add('border-transparent', 'text-gray-500');
        });
        
        // Add active class to clicked button
        this.classList.add('active', 'border-blue-500', 'text-blue-600');
        this.classList.remove('border-transparent', 'text-gray-500');
        
        // Hide all tab contents
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });
        
        // Show corresponding tab content
        const tabId = this.id.replace('tab-', 'content-');
        document.getElementById(tabId).classList.remove('hidden');
        
        // Load tournaments when switching to tournaments tab
        if (tabId === 'content-torneos') {
          loadTournaments();
        }
      });
    });

    // Tournament modal functionality
    const tournamentModal = document.getElementById('tournament-modal');
    const tournamentModalTitle = document.getElementById('tournament-modal-title');
    const tournamentForm = document.getElementById('tournament-form');
    const closeTournamentModal = document.getElementById('close-tournament-modal');
    const cancelTournamentBtn = document.getElementById('cancel-tournament-btn');

    function openTournamentModal() {
      tournamentModal.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
    }

    function closeTournamentModalFn() {
      tournamentModal.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
      tournamentForm.reset();
      document.getElementById('tournament-id').value = '';
    }

    closeTournamentModal.addEventListener('click', closeTournamentModalFn);
    cancelTournamentBtn.addEventListener('click', closeTournamentModalFn);

    // Close modal when clicking outside
    tournamentModal.addEventListener('click', function(e) {
      if (e.target === tournamentModal) {
        closeTournamentModalFn();
      }
    });

    // Create tournament button
    document.getElementById('create-tournament-btn').addEventListener('click', function() {
      tournamentModalTitle.textContent = 'Crear Nuevo Torneo';
      tournamentForm.reset();
      document.getElementById('tournament-id').value = '';
      openTournamentModal();
    });

    // Load tournaments from API
    async function loadTournaments() {
      try {
        const response = await fetch('/api/tournaments');
        if (!response.ok) {
          throw new Error('Error al cargar torneos');
        }
        
        const tournaments = await response.json();
        displayTournaments(tournaments);
      } catch (error) {
        console.error('Error loading tournaments:', error);
        document.getElementById('tournaments-list').innerHTML = `
          <div class="text-center py-8">
            <p class="text-red-500">Error al cargar torneos: ${error.message}</p>
            <button onclick="loadTournaments()" class="mt-2 bg-blue-600 text-white px-4 py-2 rounded-lg">
              Reintentar
            </button>
          </div>
        `;
      }
    }

    // Display tournaments in the list
    function displayTournaments(tournaments) {
      const tournamentsList = document.getElementById('tournaments-list');
      
      if (tournaments.length === 0) {
        tournamentsList.innerHTML = `
          <div class="text-center py-8">
            <p class="text-gray-500">No hay torneos creados aún.</p>
          </div>
        `;
        return;
      }

      tournamentsList.innerHTML = tournaments.map(tournament => {
        const statusColors = {
          'upcoming': 'bg-blue-500',
          'active': 'bg-green-500',
          'completed': 'bg-gray-500',
          'cancelled': 'bg-red-500'
        };

        const statusLabels = {
          'upcoming': 'Próximo',
          'active': 'Activo',
          'completed': 'Finalizado',
          'cancelled': 'Cancelado'
        };

        return `
          <div class="border border-gray-200 rounded-lg p-4" data-tournament-id="${tournament.id}">
            <div class="flex justify-between items-start mb-4">
              <span class="px-3 py-1 rounded-full text-xs font-medium text-white ${statusColors[tournament.status]}">
                ${statusLabels[tournament.status]}
              </span>
              <div class="flex space-x-2">
                <button class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm edit-tournament-btn" data-tournament-id="${tournament.id}">
                  Editar
                </button>
                <button class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm delete-tournament-btn" data-tournament-id="${tournament.id}" data-tournament-name="${tournament.name}">
                  Eliminar
                </button>
              </div>
            </div>
            <h4 class="text-lg font-semibold text-gray-900 mb-2">${tournament.name}</h4>
            <div class="space-y-2 text-sm text-gray-600">
              <p>📅 ${tournament.start_date} - ${tournament.start_time}</p>
              <p>👥 ${tournament.max_players} jugadores</p>
              <p>📍 ${tournament.location}</p>
              <p>💰 $${tournament.cost}</p>
              <p>🎯 Sistema: ${tournament.system}</p>
              <p>⏱️ ${tournament.time_per_player} min por jugador</p>
            </div>
            <p class="text-gray-700 mt-3">${tournament.description}</p>
          </div>
        `;
      }).join('');
    }

    // Save tournament functionality
    document.getElementById('save-tournament-btn').addEventListener('click', async function() {
      const formData = new FormData(tournamentForm);
      const tournamentId = document.getElementById('tournament-id').value;
      const isEditing = tournamentId !== '';

      const tournamentData = {
        name: formData.get('name'),
        description: formData.get('description'),
        max_players: formData.get('max_players'),
        system: formData.get('system'),
        time_per_player: formData.get('time_per_player'),
        start_date: formData.get('start_date'),
        start_time: formData.get('start_time'),
        location: formData.get('location'),
        prizes: formData.get('prizes') || '',
        cost: formData.get('cost')
      };

      try {
        this.textContent = 'Guardando...';
        this.disabled = true;

        const method = isEditing ? 'PUT' : 'POST';
        const url = isEditing ? `/api/tournaments/${tournamentId}` : '/api/tournaments';
        
        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(tournamentData),
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al guardar el torneo');
        }
        
        alert('Torneo guardado correctamente!');
        closeTournamentModalFn();
        loadTournaments(); // Reload tournaments list
      } catch (error) {
        console.error('Error:', error);
        alert('Error al guardar el torneo: ' + error.message);
      } finally {
        this.textContent = 'Guardar Torneo';
        this.disabled = false;
      }
    });

    // Edit tournament functionality
    document.addEventListener('click', async function(e) {
      if (e.target.classList.contains('edit-tournament-btn')) {
        const tournamentId = e.target.dataset.tournamentId;
        
        try {
          tournamentModalTitle.textContent = 'Cargando...';
          openTournamentModal();

          const response = await fetch(`/api/tournaments/${tournamentId}`);
          if (!response.ok) {
            throw new Error(`Error al cargar el torneo: ${response.status}`);
          }
          
          const tournament = await response.json();
          
          // Fill form with existing data
          document.getElementById('tournament-id').value = tournament.id;
          document.getElementById('tournament-name').value = tournament.name;
          document.getElementById('tournament-description').value = tournament.description;
          document.getElementById('tournament-max-players').value = tournament.max_players;
          document.getElementById('tournament-system').value = tournament.system;
          document.getElementById('tournament-time').value = tournament.time_per_player;
          document.getElementById('tournament-date').value = tournament.start_date;
          document.getElementById('tournament-time-start').value = tournament.start_time;
          document.getElementById('tournament-location').value = tournament.location;
          document.getElementById('tournament-cost').value = tournament.cost;
          document.getElementById('tournament-prizes').value = tournament.prizes || '';
          
          tournamentModalTitle.textContent = 'Editar Torneo';
        } catch (error) {
          console.error('Error:', error);
          alert('Error al cargar el torneo. Intenta nuevamente.');
          closeTournamentModalFn();
        }
      }
    });

    // Delete tournament functionality
    document.addEventListener('click', async function(e) {
      if (e.target.classList.contains('delete-tournament-btn')) {
        const tournamentId = e.target.dataset.tournamentId;
        const tournamentName = e.target.dataset.tournamentName;

        if (confirm(`¿Estás seguro de que quieres eliminar el torneo "${tournamentName}"?`)) {
          try {
            const response = await fetch(`/api/tournaments/${tournamentId}`, {
              method: 'DELETE',
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.error || 'Error al eliminar el torneo');
            }

            alert('Torneo eliminado correctamente!');
            loadTournaments(); // Reload tournaments list
          } catch (error) {
            console.error('Error:', error);
            alert('Error al eliminar el torneo: ' + error.message);
          }
        }
      }
    });

    // Load tournaments initially
    loadTournaments();

    // Post Modal functionality
    const postModal = document.getElementById('post-modal');
    const postModalTitle = document.getElementById('post-modal-title');
    const postForm = document.getElementById('post-form');
    const closePostModal = document.getElementById('close-post-modal');
    const cancelPostModal = document.getElementById('cancel-post-modal');

    // Open modal for creating new post
    document.getElementById('create-post-btn').addEventListener('click', function() {
      postModalTitle.textContent = 'Crear Post';
      postForm.reset();
      document.getElementById('post-id').value = '';
      
      // Resetear imagen de portada
      const featuredImageInput = document.getElementById('post-image');
      const featuredImagePreview = document.getElementById('featured-image-preview');
      const uploadPreview = document.getElementById('featured-image-upload-preview');
      const featuredImageOptional = document.getElementById('featured-image-optional');
      const featuredImageHelp = document.getElementById('featured-image-help');
      
      featuredImageInput.value = '';
      featuredImageInput.dataset.currentImage = '';
      featuredImagePreview.classList.add('hidden');
      uploadPreview.classList.add('hidden');
      featuredImageOptional.textContent = '(requerida)';
      featuredImageHelp.textContent = 'Selecciona una imagen para la portada del post';
      
      postModal.classList.remove('hidden');
    });

    // Open modal for editing existing post
    document.addEventListener('click', async function(e) {
      if (e.target.classList.contains('edit-post-btn')) {
        const postId = e.target.dataset.postId;
        
        postModalTitle.textContent = 'Editar Post';
        document.getElementById('post-id').value = postId;
        
        try {
          // Fetch post data
          const response = await fetch(`/api/posts/${postId}`);
          if (response.ok) {
            const post = await response.json();
            
            // Fill form with existing data
            document.getElementById('post-id').value = post.id;
            document.getElementById('post-title').value = post.title;
            document.getElementById('post-slug').value = post.slug;
            
            // Convert date to YYYY-MM-DD format for date input
            let dateValue = '';
            try {
              const dateObj = new Date(post.date);
              if (!isNaN(dateObj.getTime())) {
                dateValue = dateObj.toISOString().split('T')[0];
              } else if (typeof post.date === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(post.date)) {
                dateValue = post.date;
              }
            } catch (error) {
              console.warn('Invalid date format:', post.date);
              if (typeof post.date === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(post.date)) {
                dateValue = post.date;
              }
            }
            document.getElementById('post-date').value = dateValue;
            
            document.getElementById('post-version').value = post.version;
            document.getElementById('post-content').value = post.content;
            
            // Manejar imagen de portada
            const featuredImageInput = document.getElementById('post-image');
            const featuredImagePreview = document.getElementById('featured-image-preview');
            const previewImg = document.getElementById('preview-img');
            const featuredImageOptional = document.getElementById('featured-image-optional');
            const featuredImageHelp = document.getElementById('featured-image-help');
            
            featuredImageInput.value = '';
            featuredImageInput.dataset.currentImage = post.featured_image || '';
            featuredImageOptional.textContent = '(opcional)';
            featuredImageHelp.textContent = 'Actualizar imagen de portada (opcional)';
            
            if (post.featured_image) {
              previewImg.src = getImageUrl(post.featured_image);
              featuredImagePreview.classList.remove('hidden');
            } else {
              featuredImagePreview.classList.add('hidden');
            }
            
            postModal.classList.remove('hidden');
          } else {
            alert('Error al cargar el post. Intenta nuevamente.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al cargar el post. Intenta nuevamente.');
        }
      }
    });

    // Close modal functions
    closePostModal.addEventListener('click', function() {
      postModal.classList.add('hidden');
    });

    cancelPostModal.addEventListener('click', function() {
      postModal.classList.add('hidden');
    });

    // Close modal when clicking outside
    postModal.addEventListener('click', function(e) {
      if (e.target === postModal) {
        postModal.classList.add('hidden');
      }
    });

    // Save post functionality
    document.getElementById('save-post').addEventListener('click', async function() {
      const formData = new FormData(postForm);
      const postId = document.getElementById('post-id').value;
      const isEditing = postId !== '';
      const imageFile = document.getElementById('post-image').files[0];

      // Si es un post nuevo, la imagen es obligatoria
      if (!isEditing && !imageFile) {
        alert('Por favor selecciona una imagen de portada para el post');
        return;
      }

      let featuredImagePath = '';

      // Si hay una imagen nueva, subirla primero
      if (imageFile) {
        try {
          const uploadFormData = new FormData();
          uploadFormData.append('image', imageFile);
          
          const uploadResponse = await fetch('/api/upload-image', {
            method: 'POST',
            body: uploadFormData
          });
          
          if (!uploadResponse.ok) {
            throw new Error('Error al subir la imagen');
          }
          
          const uploadResult = await uploadResponse.json();
          featuredImagePath = uploadResult.fileName;
        } catch (error) {
          console.error('Error subiendo imagen:', error);
          alert('Error al subir la imagen. Intenta nuevamente.');
          return;
        }
      }

      const postData = {
        title: formData.get('title'),
        slug: formData.get('slug'),
        date: formData.get('date'),
        version: formData.get('version'),
        content: formData.get('content'),
        featured_image: featuredImagePath || (isEditing ? document.getElementById('post-image').dataset.currentImage : '')
      };

      // Validar slug reservado
      const reservedSlugs = ['torneos', 'admin', 'editor', 'colega']
      if (reservedSlugs.includes(postData.slug.toLowerCase())) {
        alert('Error: Este slug está reservado para rutas del sistema. Por favor usa otro slug.');
        return;
      }

      try {
        this.textContent = 'Guardando...';
        this.disabled = true;

        const url = '/api/posts' + (isEditing ? `/${postId}` : '');
        const method = isEditing ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(postData)
        });

        if (response.ok) {
          alert('Post guardado correctamente!');
          postModal.classList.add('hidden');
          window.location.reload();
        } else {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al guardar el post');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al guardar el post: ' + error.message);
      } finally {
        this.textContent = 'Guardar Post';
        this.disabled = false;
      }
    });

    // Preview de imagen cuando se selecciona un archivo
    document.getElementById('post-image').addEventListener('change', function(e) {
      const file = e.target.files[0];
      const uploadPreview = document.getElementById('featured-image-upload-preview');
      const uploadPreviewImg = document.getElementById('upload-preview-img');
      
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          uploadPreviewImg.src = e.target.result;
          uploadPreview.classList.remove('hidden');
        };
        reader.readAsDataURL(file);
      } else {
        uploadPreview.classList.add('hidden');
      }
    });

    // Delete post functionality
    document.addEventListener('click', async function(e) {
      if (e.target.classList.contains('delete-post-btn')) {
        const postId = e.target.dataset.postId;
        const postTitle = e.target.dataset.postTitle || 'este post';
        
        if (confirm(`¿Estás seguro de que quieres eliminar ${postTitle}?`)) {
          try {
            const response = await fetch(`/api/posts/${postId}`, {
              method: 'DELETE'
            });
            
            if (response.ok) {
              alert('Post eliminado correctamente!');
              window.location.reload();
            } else {
              const errorData = await response.json();
              throw new Error(errorData.error || 'Error al eliminar el post');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Error al eliminar el post: ' + error.message);
          }
        }
      }
    });
  }
  
  // Esperar a que el DOM esté listo
  document.addEventListener('DOMContentLoaded', function() {
    // Agregar event listener al formulario
    const form = document.getElementById('admin-login-form');
    
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        handleLogin();
      });
    }
  });
</script>

<style>
  .tab-button.active {
    @apply border-blue-500 text-blue-600;
  }
</style>
